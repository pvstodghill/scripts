#! /usr/bin/env perl

use strict;
use warnings FATAL => 'all';
#use Carp::Always;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

use JSON qw( decode_json encode_json );     # From CPAN
use Data::Dumper;               # Perl core module

# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_h;

my $usage_str = "";
my $progname = basename($0);
$usage_str .= "Usage: cat assembly_data_report.jsonl | $progname > info.tsv\n";

$usage_str .= "-h - print help\n";

sub usage {
  print STDERR $usage_str;
  exit(@_);
}

my $stat = getopts('h');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

# ------------------------------------------------------------------------
# Parse the JSON file(s) and print the necessary meta-data
# ------------------------------------------------------------------------

my $headered = FALSE;

sub process_entry {
  my ($entry) = @_;

  my $accession = $entry->{accession};

  my $source;
  if ($accession =~ /^GCF_/) {
    $source = "refseq";
  } elsif ($accession =~ /^GCA_/) {
    $source = "genbank";
  } else {
    die "Cannot assign source to <<$accession>>,";
  }

  my $organism = $entry->{organism};
  my $organismName = $organism->{organismName} || $organism->{organism_name};

  my $infraspecificNames = $organism->{infraspecificNames} || $organism->{infraspecific_names};
  my $raw_strain = $infraspecificNames->{strain};
  my $raw_isolate = $infraspecificNames->{isolate};

  if (!defined($raw_strain)) { $raw_strain = ""; }
  if (!defined($raw_isolate)) { $raw_isolate = ""; }

  my $strain;
  if ($raw_strain eq $raw_isolate) {
    $strain = $raw_strain ;
  } elsif ($raw_isolate eq "") {
    $strain = $raw_strain;
  } elsif ($raw_strain eq "") {
    $strain = $raw_isolate;
  } else {
    $strain = $raw_strain."//".$raw_isolate;
  }

  if ( $organismName =~ /^(.+) $strain$/ ) {
    $organismName = $1;
  }
  if ( $strain =~ /^$organismName (.+)$/ ) {
    $strain = $1;
  }

  my $assembly_info = $entry->{assemblyInfo} || $entry->{assembly_info};

  my $assembly_level = $assembly_info->{assemblyLevel} || $assembly_info->{assembly_level};
  my $assembly_status = $assembly_info->{assemblyStatus} || $assembly_info->{assembly_status};
  my $release_date = $assembly_info->{releaseDate} || $assembly_info->{release_date};
  my $category = "";
  if (defined($assembly_info->{refseqCategory})) {
    $category = $assembly_info->{refseqCategory};
  } elsif (defined($assembly_info->{refseq_category})) {
    $category = $assembly_info->{refseq_category};
  }


  my $type_info = "";
  if ( defined($entry->{typeMaterial}) ) {
    $type_info = $entry->{typeMaterial}->{typeLabel};
  } elsif  ( defined($entry->{type_material}) ) {
    $type_info = $entry->{type_material}->{type_label};
  }

  if (!$headered) {
    print join("\t","Accession","Source","Organism","Strain","Level","Status","Date",
	       "Category","TypeCode"),"\n";
    $headered = TRUE;
  }

  print join("\t",$accession,$source,$organismName,$strain,$assembly_level,$assembly_status,$release_date,
	    $category,$type_info),"\n";

}

while (<STDIN>) {
  my $entry = decode_json($_);

  if ($entry->{reports}) {
    foreach my $entry2 ($entry->{reports}->@*) {
      process_entry($entry2);
    }
  } else {
    process_entry($entry);
  }
}

# ------------------------------------------------------------------------
# Done.
# ------------------------------------------------------------------------
